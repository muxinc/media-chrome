---
import { Markdown } from '@astropub/md';
import MainLayout from '../../layouts/MainLayout.astro';
import manifest from '../../../../dist/custom-elements.json';

const { frontmatter = {}, headings = [], url } = Astro.props as Props;
const components = await Astro.glob('./components/*');

function hasLink(tagName) {
  return components.some(c => c.file.includes(tagName));
}

const groups = [
  'button',
  'range',
  'display',
  'indicator',
  'other',
];

for (let group of groups) {
  headings.push({ depth: 2, slug: `${group}s`, text: `${capitalizeFirstLetter(group)}s` });
}

let allCssProps = {};
for (let cls of getClasses(manifest)) {
  for (let cssProp of cls.cssProperties ?? []) {
    if (!allCssProps[cssProp.name]) {
      allCssProps[cssProp.name] = cssProp;
      cssProp.groups = new Set();
    }
    if (cls.tagName) {
      allCssProps[cssProp.name].groups.add(cls.tagName.split('-').pop());
    }
  }
}

let sortedCssProps = [...Object.keys(allCssProps)].sort();

function getClasses(manifest) {
  let classes = [];
  for (let moduleDoc of manifest.modules) {
    classes.push(...moduleDoc.declarations.filter(d => d.kind === 'class'));
  }
  return classes;
}

function capitalizeFirstLetter(str) {
  return str[0].toUpperCase() + str.slice(1);
}

---

<MainLayout frontmatter={frontmatter} headings={headings}>
  <h1>Styling Reference</h1>

  {groups.map(group => (
    <Markdown of={`## ${capitalizeFirstLetter(group)}s`} />

    <ul>
      {getClasses(manifest)
        .filter(cls => {
          if (group !== 'other') {
            return cls.tagName?.endsWith(group);
          }
          return cls.tagName && groups.every(group => !cls.tagName?.endsWith(group));
        })
        .map(cls => (
          <li>
            <code>{cls.tagName}</code>
            {hasLink(cls.tagName) && <>(<a href={`./components/${cls.tagName}`}>docs</a>)</>}
          </li>
        ))
      }
    </ul>

    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Default</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        {
          sortedCssProps
            .filter((key) => {
              if (group !== 'other') {
                return allCssProps[key].groups.has(group);
              }
              return groups.every(group => !allCssProps[key].groups.has(group));
            })
            .map((key) => {
              const cssProp = allCssProps[key];
              return <tr>
                  <td class="nowrap"><code>{cssProp.name}</code></td>
                  <td style="max-width: 20rem;">{cssProp.default && <code>{cssProp.default}</code>}</td>
                  <td>{cssProp.description}</td>
                </tr>
            })
        }
      </tbody>
    </table>
  ))}

</MainLayout>
